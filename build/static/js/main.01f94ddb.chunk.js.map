{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","setName","age","setAge","description","setDescription","list","setList","useEffect","Axios","get","then","response","data","catch","console","log","className","type","onChange","event","target","value","onClick","post","_id","map","val","id","newAge","prompt","put","updateFriend","delete","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRAqFeA,MAhFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAESF,mBAAS,IAFlB,mBAENG,EAFM,KAEDC,EAFC,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,KA2Cb,OAVAC,qBAAU,WACRC,IAAMC,IAAI,wCACPC,MAAK,SAACC,GAELL,EAAQK,EAASC,SAEhBC,OAAM,WACPC,QAAQC,IAAI,cAEf,IAED,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAC5BnB,EAAQmB,EAAMC,OAAOC,UAEvB,2BAAOJ,KAAK,OAAOC,SAAU,SAACC,GAC5BjB,EAAOiB,EAAMC,OAAOC,UAEtB,2BAAOJ,KAAK,OAAOC,SAAU,SAACC,GAC5Bf,EAAee,EAAMC,OAAOC,UAE9B,4BAAQC,QAlDF,WACVR,QAAQC,IAAIhB,EAAME,EAAKE,GACvBK,IAAMe,KAAK,yCAA0C,CACnDxB,KAAMA,EACNE,IAAKA,EACLE,YAAYA,IACXO,MAAK,SAACC,GACPL,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACmB,IAAIb,EAASC,KAAKY,IAAKzB,KAAMA,EAAME,IAAKA,EAAKE,YAAaA,SAE5EU,OAAM,iBAyCL,eAEF,yBAAKG,UAAU,WACZX,EAAKoB,KAAI,SAACC,GACT,OACE,yBAAKV,UAAU,iBACf,yBAAKA,UAAU,QACb,yCAAeU,EAAI3B,KAAnB,QACA,uCAAa2B,EAAIzB,IAAjB,MACA,uCAAayB,EAAIvB,YAAjB,MAEF,6BACE,4BAAQmB,QAAS,YAjDZ,SAACK,GAClB,IAAMC,EAAOC,OAAO,WACpBrB,IAAMsB,IAAI,yCAAyC,CAACF,OAAOA,EAAOD,GAAGA,IAAKjB,MAAK,WAC7EJ,EAAQD,EAAKoB,KAAI,SAACC,GAChB,OAAOA,EAAIF,KAAKG,EAAK,CAACH,IAAIG,EAAG5B,KAAK2B,EAAI3B,KAAKE,IAAI2B,EAAOzB,YAAYuB,EAAIvB,aAAeuB,SA6CvDK,CAAaL,EAAIF,OAAvC,UAEA,4BAAQF,QAAS,WA3CZ,IAACK,IA2C6BD,EAAIF,IA1CnDhB,IAAMwB,OAAN,iDAAuDL,IAAMjB,MAAK,WAChEJ,EAAQD,EAAK4B,QAAO,SAACP,GACnB,OAAOA,EAAIF,KAAMG,WAwCT,kBC9DMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.01f94ddb.chunk.js","sourcesContent":["import React from 'react'\n\nimport './App.css'\nimport Axios from 'axios'\nimport { useState, useEffect } from 'react'\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [list, setList] = useState([]);\n  const add = () => {\n    console.log(name, age, description)\n    Axios.post('https://sajjadapp.herokuapp.com/insert', {\n      name: name,\n      age: age,\n      description:description\n    }).then((response) => {\n      setList([...list, {_id:response.data._id, name: name, age: age, description: description }])\n      // alert(\"Yay Worked\");\n    }).catch(() => {\n      // alert(\"failed\")\n    })\n  }\nconst updateFriend=(id)=>{\n  const newAge=prompt(\"New Age\");\n  Axios.put('https://sajjadapp.herokuapp.com/update',{newAge:newAge,id:id}).then(()=>{\n    setList(list.map((val)=>{\n      return val._id==id ? {_id:id,name:val.name,age:newAge,description:val.description} : val\n    }))\n  })\n} \nconst deleteFriend=(id)=>{\n  Axios.delete(`https://sajjadapp.herokuapp.com/delete/${id}`).then(()=>{\n    setList(list.filter((val)=>{\n      return val._id !=id;\n    }))\n  })\n}  \n  useEffect(() => {\n    Axios.get('https://sajjadapp.herokuapp.com/read')\n      .then((response) => {\n        // console.log(response.data)\n        setList(response.data)\n       \n      }).catch(() => {\n        console.log(\"Error\")\n      })\n  }, [])\n  return (\n    <div className=\"App\">\n      <div className=\"inputs\">\n        <input type=\"text\" onChange={(event) => {\n          setName(event.target.value)\n        }} />\n        <input type=\"text\" onChange={(event) => {\n          setAge(event.target.value)\n        }} />\n        <input type=\"text\" onChange={(event) => {\n          setDescription(event.target.value)\n        }} />\n        <button onClick={add}>Add Friend</button>\n      </div>\n      <div className=\"listAll\">\n        {list.map((val) => {\n          return (\n            <div className=\"containerList\">           \n            <div className=\"item\">\n              <p>  Name  :  {val.name}    </p>\n              <p>  Age :  {val.age}  </p>\n              <p>  Desc : {val.description} </p>\n            </div>\n            <div>\n              <button onClick={()=>{updateFriend(val._id)\n              }}>Update</button>\n              <button onClick={()=>{deleteFriend(val._id)\n              }}>Delete</button></div>\n            </div>\n            )\n        })}\n      </div>\n    </div>\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/material-design-lite/dist/material.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}